import json
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseRedirect
from django.views import generic
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.csrf import csrf_protect
from main import Horizon2FA
from keystoneclient.v3 import client
from user import User
import pdb


twoFA = Horizon2FA()


class IndexView(generic.TemplateView):
    template_name = 'horizon2fa_panel/index.html'


def index(request):

    print "########## - Start of My Debug - ##########"

    kc_user_name = request.user.username
    kc_user_id = request.user.id
    #kc_user_password = request.POST['password']
    kc_user_password = 'password'
    try:
        keystone = client.Client(username=kc_user_name,
                                 password=kc_user_password,
                                 auth_url="http://localhost:5000/v3")
    except keystoneauth1.exceptions.http.Unauthorized:
        print "User not allowed"

    keystone = client.Client(username='admin',
                             password='password',
                             project_name='admin',
                             auth_url='http://localhost:5000/v3')

    print kc_user_name
    print kc_user_id
    print kc_user_password
    pdb.set_trace()
    user = keystone.users.get(kc_user_id) 
    kc_user_email = str(user.email)
#    print str(user)

    u = User.get_user(kc_user_email)
    if u is None:
        print("[Error]: Invalid email address.")
    else:
        print("### MAIL ADDRESS OK!")

####################
#       |      >>> keystone = client.Client(endpoint="http://localhost:5000/v3", token="94f4b9dd562c4490adbf5c844a97a2a3")
#       |      >>> keystone.projects.list()
#       |      ...
#       |      >>> user = keystone.users.get(USER_ID)
#       |      >>> user.delete()
#  
#  
#  mark	87fdc59866e24cb98e57a8f0ab9a4558
#  admin	be14601a92bd4595adf0aa1d5464e083
#
#
#
#             u = twoFA.new(request.POST['email'], None, request.POST['password'])
#
####################

#    print "### Username: " + str(request.user.username)
#
#    if not request.user.check_password('password'):
#        print "### INVALID PASSWORD"
#    else:
#        print "### Password is OK"
#
#    print " ### ----------"
#
#    print request.user.token.id
#    print str(request.user.token.id)
#
#    print " ### ----------"
#
#    # TESTS OK!!!
#    #conn = keystone.keystoneclient(request, admin=True)
#    #print keystone.user_list(request, project='admin', domain='Default')
#    #conn = 

    print "########## - End of My Debug - ##########"

    return render(request, 'horizon2fa_panel/index.html', {})


def loginview(request):
    return render(request, 'horizon2fa_panel/login.html', {})


def newview(request):
    return render(request, 'horizon2fa_panel/new.html', {})


def otpconfirm(request):
    if request.method == 'POST':
        try:
            result = twoFA.otpConfirm(request.POST['email'],\
                                    request.POST['otp'])

            if 'system' in result.keys():
                return result
            else:
                return HttpResponseRedirect('login')

        except Exception as e:
            print("[Error]: Fail to confirm otp. Details: %s." % e)

    else:
        return render(request, 'horizon2fa_panel/new.html', {})


def login(request):
    user = None

    if request.method == 'POST':
        try:
            result, user = twoFA.login(request.POST['email'],
                                       request.POST['otp'],
                                       request.POST['password'])

            if 'system' in result.keys():
                return result
            else:
                context = {'user': {'email': user.email}}
                return render(request, 'horizon2fa_panel/'
                              + result['route'], context)

        except Exception as e:
            print("[Error]: Fail to login on backend. Details: %s." % e)
            return render(request, 'horizon2fa_panel/login.html', {})

    else:
        return render(request, 'horizon2fa_panel/login.html', {})


@csrf_exempt
def code(request):
    if request.method == 'POST':
        try:
            result = twoFA.code(request.POST['email'])

            if len(result) > 0:
                return HttpResponse(json.dumps(result),
                            content_type = "application/json")

        except Exception as e:
            print("[Error]: Fail to get codes. Details: %s." % e)


def new(request):
    """New user form."""
    if request.method == 'POST':
        u = twoFA.new(request.POST['email'], None, request.POST['password'])

        if twoFA.save(u):
            return render(request, 'horizon2fa_panel/created.html', {'user':u})
        else:
            return HttpResponse('Invalid email or user already exists.')
    else:
        return render(request, 'horizon2fa_panel/new.html')


def qr(request):
    return HttpResponse(twoFA.qr(request.GET.get("email")), content_type="image/png")
